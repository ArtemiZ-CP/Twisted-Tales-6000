// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Board))]
  public unsafe class BoardPrototype : ComponentPrototype<Quantum.Board> {
    public MapEntityId Ref;
    public Quantum.Prototypes.PlayerLinkPrototype Player1;
    public Quantum.Prototypes.PlayerLinkPrototype Player2;
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.HeroEntityPrototype[] HeroesID1 = {};
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.HeroEntityPrototype[] HeroesID2 = {};
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.FightingHeroPrototype[] FightingHeroesMap = {};
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.HeroProjectilePrototype[] HeroProjectiles = {};
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.GlobalEffectQntPrototype[] GlobalEffects = {};
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Board component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Board result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.Ref, in context, out result.Ref);
        this.Player1.Materialize(frame, ref result.Player1, in context);
        this.Player2.Materialize(frame, ref result.Player2, in context);
        if (this.HeroesID1.Length == 0) {
          result.HeroesID1 = default;
        } else {
          var list = frame.AllocateList(out result.HeroesID1, this.HeroesID1.Length);
          for (int i = 0; i < this.HeroesID1.Length; ++i) {
            Quantum.HeroEntity tmp = default;
            this.HeroesID1[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        if (this.HeroesID2.Length == 0) {
          result.HeroesID2 = default;
        } else {
          var list = frame.AllocateList(out result.HeroesID2, this.HeroesID2.Length);
          for (int i = 0; i < this.HeroesID2.Length; ++i) {
            Quantum.HeroEntity tmp = default;
            this.HeroesID2[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        if (this.FightingHeroesMap.Length == 0) {
          result.FightingHeroesMap = default;
        } else {
          var list = frame.AllocateList(out result.FightingHeroesMap, this.FightingHeroesMap.Length);
          for (int i = 0; i < this.FightingHeroesMap.Length; ++i) {
            Quantum.FightingHero tmp = default;
            this.FightingHeroesMap[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        if (this.HeroProjectiles.Length == 0) {
          result.HeroProjectiles = default;
        } else {
          var list = frame.AllocateList(out result.HeroProjectiles, this.HeroProjectiles.Length);
          for (int i = 0; i < this.HeroProjectiles.Length; ++i) {
            Quantum.HeroProjectile tmp = default;
            this.HeroProjectiles[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        if (this.GlobalEffects.Length == 0) {
          result.GlobalEffects = default;
        } else {
          var list = frame.AllocateList(out result.GlobalEffects, this.GlobalEffects.Length);
          for (int i = 0; i < this.GlobalEffects.Length; ++i) {
            Quantum.GlobalEffectQnt tmp = default;
            this.GlobalEffects[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EffectQnt))]
  public unsafe class EffectQntPrototype : StructPrototype {
    public MapEntityId Owner;
    public Int32 Index;
    public FP MaxValue;
    public FP Value;
    public FP MaxDuration;
    public FP Duration;
    public Int32 Size;
    public void Materialize(Frame frame, ref Quantum.EffectQnt result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Index = this.Index;
        result.MaxValue = this.MaxValue;
        result.Value = this.Value;
        result.MaxDuration = this.MaxDuration;
        result.Duration = this.Duration;
        result.Size = this.Size;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.FightingHero))]
  public unsafe class FightingHeroPrototype : StructPrototype {
    public Quantum.Prototypes.HeroEntityPrototype Hero;
    public Int32 Index;
    public Int32 BoardIndex;
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.EffectQntPrototype[] Effects = {};
    public FP CurrentHealth;
    public FP CurrentArmor;
    public FP CurrentMana;
    public MapEntityId AttackTarget;
    public Int32 TargetPositionX;
    public Int32 TargetPositionY;
    public Int32 TeamNumber;
    public QBoolean IsAlive;
    public FP AttackTimer;
    public Int32 AttackStage;
    public Int32 AbilityStage;
    public Int32 ExtraLives;
    public FP DealedBaseDamage;
    public FP DealedAbilityDamage;
    public FP TakenDamage;
    public void Materialize(Frame frame, ref Quantum.FightingHero result, in PrototypeMaterializationContext context = default) {
        this.Hero.Materialize(frame, ref result.Hero, in context);
        result.Index = this.Index;
        result.BoardIndex = this.BoardIndex;
        if (this.Effects.Length == 0) {
          result.Effects = default;
        } else {
          var list = frame.AllocateList(out result.Effects, this.Effects.Length);
          for (int i = 0; i < this.Effects.Length; ++i) {
            Quantum.EffectQnt tmp = default;
            this.Effects[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        result.CurrentHealth = this.CurrentHealth;
        result.CurrentArmor = this.CurrentArmor;
        result.CurrentMana = this.CurrentMana;
        PrototypeValidator.FindMapEntity(this.AttackTarget, in context, out result.AttackTarget);
        result.TargetPositionX = this.TargetPositionX;
        result.TargetPositionY = this.TargetPositionY;
        result.TeamNumber = this.TeamNumber;
        result.IsAlive = this.IsAlive;
        result.AttackTimer = this.AttackTimer;
        result.AttackStage = this.AttackStage;
        result.AbilityStage = this.AbilityStage;
        result.ExtraLives = this.ExtraLives;
        result.DealedBaseDamage = this.DealedBaseDamage;
        result.DealedAbilityDamage = this.DealedAbilityDamage;
        result.TakenDamage = this.TakenDamage;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.GlobalEffectQnt))]
  public unsafe class GlobalEffectQntPrototype : StructPrototype {
    public Int32 Center;
    public MapEntityId Owner;
    public Int32 Index;
    public FP Value;
    public FP Duration;
    public Int32 Size;
    public void Materialize(Frame frame, ref Quantum.GlobalEffectQnt result, in PrototypeMaterializationContext context = default) {
        result.Center = this.Center;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Index = this.Index;
        result.Value = this.Value;
        result.Duration = this.Duration;
        result.Size = this.Size;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.HeroEntity))]
  public unsafe class HeroEntityPrototype : StructPrototype {
    public PlayerRef Player;
    public MapEntityId Ref;
    public Int32 ID;
    public Int32 Level;
    public FPVector3 DefaultPosition;
    public FP Health;
    public FP MaxMana;
    public FP ManaRegen;
    public FP Defense;
    public FP MagicDefense;
    public FP AttackDamage;
    public FP AttackSpeed;
    public FP ProjectileSpeed;
    public Int32 Range;
    public FP RangePercentage;
    public Int32 AttackDamageType;
    public void Materialize(Frame frame, ref Quantum.HeroEntity result, in PrototypeMaterializationContext context = default) {
        result.Player = this.Player;
        PrototypeValidator.FindMapEntity(this.Ref, in context, out result.Ref);
        result.ID = this.ID;
        result.Level = this.Level;
        result.DefaultPosition = this.DefaultPosition;
        result.Health = this.Health;
        result.MaxMana = this.MaxMana;
        result.ManaRegen = this.ManaRegen;
        result.Defense = this.Defense;
        result.MagicDefense = this.MagicDefense;
        result.AttackDamage = this.AttackDamage;
        result.AttackSpeed = this.AttackSpeed;
        result.ProjectileSpeed = this.ProjectileSpeed;
        result.Range = this.Range;
        result.RangePercentage = this.RangePercentage;
        result.AttackDamageType = this.AttackDamageType;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.HeroProjectile))]
  public unsafe class HeroProjectilePrototype : ComponentPrototype<Quantum.HeroProjectile> {
    public MapEntityId Ref;
    public Int64 Guid;
    public MapEntityId Owner;
    public MapEntityId Target;
    public FP Damage;
    public FPVector3 TargetPosition;
    public FP Speed;
    public Int32 DamageType;
    public Int32 Level;
    public Int32 AttackType;
    public QBoolean IsActive;
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.EffectQntPrototype[] Effects = {};
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.GlobalEffectQntPrototype[] GlobalEffects = {};
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.HeroProjectile component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.HeroProjectile result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.Ref, in context, out result.Ref);
        result.Guid = this.Guid;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        PrototypeValidator.FindMapEntity(this.Target, in context, out result.Target);
        result.Damage = this.Damage;
        result.TargetPosition = this.TargetPosition;
        result.Speed = this.Speed;
        result.DamageType = this.DamageType;
        result.Level = this.Level;
        result.AttackType = this.AttackType;
        result.IsActive = this.IsActive;
        if (this.Effects.Length == 0) {
          result.Effects = default;
        } else {
          var list = frame.AllocateList(out result.Effects, this.Effects.Length);
          for (int i = 0; i < this.Effects.Length; ++i) {
            Quantum.EffectQnt tmp = default;
            this.Effects[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        if (this.GlobalEffects.Length == 0) {
          result.GlobalEffects = default;
        } else {
          var list = frame.AllocateList(out result.GlobalEffects, this.GlobalEffects.Length);
          for (int i = 0; i < this.GlobalEffects.Length; ++i) {
            Quantum.GlobalEffectQnt tmp = default;
            this.GlobalEffects[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.MeleeHero))]
  public unsafe partial class MeleeHeroPrototype : ComponentPrototype<Quantum.MeleeHero> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.MeleeHero result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.MeleeHero component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.MeleeHero result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerBoard))]
  public unsafe partial class PlayerBoardPrototype : StructPrototype {
    [DynamicCollectionAttribute()]
    public Int32[] HeroesID = {};
    [DynamicCollectionAttribute()]
    public Int32[] HeroesLevel = {};
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.SelectedHeroAbilityPrototype[] Abilities = {};
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerBoard result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.PlayerBoard result, in PrototypeMaterializationContext context = default) {
        if (this.HeroesID.Length == 0) {
          result.HeroesID = default;
        } else {
          var list = frame.AllocateList(out result.HeroesID, this.HeroesID.Length);
          for (int i = 0; i < this.HeroesID.Length; ++i) {
            Int32 tmp = default;
            tmp = this.HeroesID[i];
            list.Add(tmp);
          }
        }
        if (this.HeroesLevel.Length == 0) {
          result.HeroesLevel = default;
        } else {
          var list = frame.AllocateList(out result.HeroesLevel, this.HeroesLevel.Length);
          for (int i = 0; i < this.HeroesLevel.Length; ++i) {
            Int32 tmp = default;
            tmp = this.HeroesLevel[i];
            list.Add(tmp);
          }
        }
        if (this.Abilities.Length == 0) {
          result.Abilities = default;
        } else {
          var list = frame.AllocateList(out result.Abilities, this.Abilities.Length);
          for (int i = 0; i < this.Abilities.Length; ++i) {
            Quantum.SelectedHeroAbility tmp = default;
            this.Abilities[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerInfo))]
  public unsafe class PlayerInfoPrototype : StructPrototype {
    [MaxStringByteCount(62, "Unicode")]
    public string Nickname;
    public Quantum.Prototypes.PlayerShopPrototype Shop;
    public Quantum.Prototypes.PlayerInventoryPrototype Inventory;
    public Quantum.Prototypes.PlayerBoardPrototype Board;
    public Int32 Coins;
    public Int32 Health;
    public Int32 Streak;
    public Int32 StreakType;
    public QBoolean Bot;
    public MapEntityId SpectatingHero;
    public void Materialize(Frame frame, ref Quantum.PlayerInfo result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.AssignQString(this.Nickname, 64, in context, out result.Nickname);
        this.Shop.Materialize(frame, ref result.Shop, in context);
        this.Inventory.Materialize(frame, ref result.Inventory, in context);
        this.Board.Materialize(frame, ref result.Board, in context);
        result.Coins = this.Coins;
        result.Health = this.Health;
        result.Streak = this.Streak;
        result.StreakType = this.StreakType;
        result.Bot = this.Bot;
        PrototypeValidator.FindMapEntity(this.SpectatingHero, in context, out result.SpectatingHero);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerInventory))]
  public unsafe partial class PlayerInventoryPrototype : StructPrototype {
    [DynamicCollectionAttribute()]
    public Int32[] HeroesID = {};
    [DynamicCollectionAttribute()]
    public Int32[] HeroesLevel = {};
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerInventory result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.PlayerInventory result, in PrototypeMaterializationContext context = default) {
        if (this.HeroesID.Length == 0) {
          result.HeroesID = default;
        } else {
          var list = frame.AllocateList(out result.HeroesID, this.HeroesID.Length);
          for (int i = 0; i < this.HeroesID.Length; ++i) {
            Int32 tmp = default;
            tmp = this.HeroesID[i];
            list.Add(tmp);
          }
        }
        if (this.HeroesLevel.Length == 0) {
          result.HeroesLevel = default;
        } else {
          var list = frame.AllocateList(out result.HeroesLevel, this.HeroesLevel.Length);
          for (int i = 0; i < this.HeroesLevel.Length; ++i) {
            Int32 tmp = default;
            tmp = this.HeroesLevel[i];
            list.Add(tmp);
          }
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerLink))]
  public unsafe class PlayerLinkPrototype : ComponentPrototype<Quantum.PlayerLink> {
    public PlayerRef Ref;
    public Quantum.Prototypes.PlayerInfoPrototype Info;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerLink component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context = default) {
        result.Ref = this.Ref;
        this.Info.Materialize(frame, ref result.Info, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerShop))]
  public unsafe partial class PlayerShopPrototype : StructPrototype {
    [DynamicCollectionAttribute()]
    public Int32[] HeroesID = {};
    public Int32 Level;
    public Int32 XP;
    public QBoolean IsLocked;
    public Int32 RollCost;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerShop result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.PlayerShop result, in PrototypeMaterializationContext context = default) {
        if (this.HeroesID.Length == 0) {
          result.HeroesID = default;
        } else {
          var list = frame.AllocateList(out result.HeroesID, this.HeroesID.Length);
          for (int i = 0; i < this.HeroesID.Length; ++i) {
            Int32 tmp = default;
            tmp = this.HeroesID[i];
            list.Add(tmp);
          }
        }
        result.Level = this.Level;
        result.XP = this.XP;
        result.IsLocked = this.IsLocked;
        result.RollCost = this.RollCost;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.RangedHero))]
  public unsafe partial class RangedHeroPrototype : ComponentPrototype<Quantum.RangedHero> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.RangedHero result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.RangedHero component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.RangedHero result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SelectedHeroAbility))]
  public unsafe partial class SelectedHeroAbilityPrototype : StructPrototype {
    public Int32 HeroID;
    public Int32 SecondAbilityIndex;
    public Int32 ThirdAbilityIndex;
    partial void MaterializeUser(Frame frame, ref Quantum.SelectedHeroAbility result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.SelectedHeroAbility result, in PrototypeMaterializationContext context = default) {
        result.HeroID = this.HeroID;
        result.SecondAbilityIndex = this.SecondAbilityIndex;
        result.ThirdAbilityIndex = this.ThirdAbilityIndex;
        MaterializeUser(frame, ref result, in context);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
