// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    public unsafe partial struct FrameEvents {
      static partial void GetEventTypeCountCodeGen(ref Int32 eventCount) {
        eventCount = 15;
      }
      static partial void GetParentEventIDCodeGen(Int32 eventID, ref Int32 parentEventID) {
        switch (eventID) {
          default: break;
        }
      }
      static partial void GetEventTypeCodeGen(Int32 eventID, ref System.Type result) {
        switch (eventID) {
          case EventGetPlayerInfo.ID: result = typeof(EventGetPlayerInfo); return;
          case EventGetCurrentPlayers.ID: result = typeof(EventGetCurrentPlayers); return;
          case EventHeroHealthChanged.ID: result = typeof(EventHeroHealthChanged); return;
          case EventHeroManaChanged.ID: result = typeof(EventHeroManaChanged); return;
          case EventChangeCoins.ID: result = typeof(EventChangeCoins); return;
          case EventReloadShop.ID: result = typeof(EventReloadShop); return;
          case EventBuyHero.ID: result = typeof(EventBuyHero); return;
          case EventMoveHero.ID: result = typeof(EventMoveHero); return;
          case EventStartRound.ID: result = typeof(EventStartRound); return;
          case EventEndRound.ID: result = typeof(EventEndRound); return;
          case EventGetRoundTime.ID: result = typeof(EventGetRoundTime); return;
          case EventGetProjectiles.ID: result = typeof(EventGetProjectiles); return;
          case EventGetShopUpgradeInfo.ID: result = typeof(EventGetShopUpgradeInfo); return;
          case EventShowCoinsReward.ID: result = typeof(EventShowCoinsReward); return;
          default: break;
        }
      }
      public EventGetPlayerInfo GetPlayerInfo(Frame Frame, PlayerRef PlayerRef, PlayerInfo PlayerInfo) {
        var ev = _f.Context.AcquireEvent<EventGetPlayerInfo>(EventGetPlayerInfo.ID);
        ev.Frame = Frame;
        ev.PlayerRef = PlayerRef;
        ev.PlayerInfo = PlayerInfo;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGetCurrentPlayers GetCurrentPlayers() {
        var ev = _f.Context.AcquireEvent<EventGetCurrentPlayers>(EventGetCurrentPlayers.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventHeroHealthChanged HeroHealthChanged(PlayerRef PlayerRef1, PlayerRef PlayerRef2, EntityRef HeroEntity, FP CurrentHealth, FP MaxHealth) {
        var ev = _f.Context.AcquireEvent<EventHeroHealthChanged>(EventHeroHealthChanged.ID);
        ev.PlayerRef1 = PlayerRef1;
        ev.PlayerRef2 = PlayerRef2;
        ev.HeroEntity = HeroEntity;
        ev.CurrentHealth = CurrentHealth;
        ev.MaxHealth = MaxHealth;
        _f.AddEvent(ev);
        return ev;
      }
      public EventHeroManaChanged HeroManaChanged(PlayerRef PlayerRef1, PlayerRef PlayerRef2, EntityRef HeroEntity, FP CurrentMana, FP MaxMana) {
        var ev = _f.Context.AcquireEvent<EventHeroManaChanged>(EventHeroManaChanged.ID);
        ev.PlayerRef1 = PlayerRef1;
        ev.PlayerRef2 = PlayerRef2;
        ev.HeroEntity = HeroEntity;
        ev.CurrentMana = CurrentMana;
        ev.MaxMana = MaxMana;
        _f.AddEvent(ev);
        return ev;
      }
      public EventChangeCoins ChangeCoins(PlayerRef PlayerRef, Int32 Coins) {
        var ev = _f.Context.AcquireEvent<EventChangeCoins>(EventChangeCoins.ID);
        ev.PlayerRef = PlayerRef;
        ev.Coins = Coins;
        _f.AddEvent(ev);
        return ev;
      }
      public EventReloadShop ReloadShop(PlayerRef PlayerRef) {
        var ev = _f.Context.AcquireEvent<EventReloadShop>(EventReloadShop.ID);
        ev.PlayerRef = PlayerRef;
        _f.AddEvent(ev);
        return ev;
      }
      public EventBuyHero BuyHero(PlayerRef PlayerRef, Int32 ShopIndex, Int32 InventoryIndex, Int32 HeroID) {
        var ev = _f.Context.AcquireEvent<EventBuyHero>(EventBuyHero.ID);
        ev.PlayerRef = PlayerRef;
        ev.ShopIndex = ShopIndex;
        ev.InventoryIndex = InventoryIndex;
        ev.HeroID = HeroID;
        _f.AddEvent(ev);
        return ev;
      }
      public EventMoveHero MoveHero(PlayerRef PlayerRef, QBoolean IsMoved) {
        var ev = _f.Context.AcquireEvent<EventMoveHero>(EventMoveHero.ID);
        ev.PlayerRef = PlayerRef;
        ev.IsMoved = IsMoved;
        _f.AddEvent(ev);
        return ev;
      }
      public EventStartRound StartRound(PlayerRef Player1, PlayerRef Player2) {
        var ev = _f.Context.AcquireEvent<EventStartRound>(EventStartRound.ID);
        ev.Player1 = Player1;
        ev.Player2 = Player2;
        _f.AddEvent(ev);
        return ev;
      }
      public EventEndRound EndRound() {
        var ev = _f.Context.AcquireEvent<EventEndRound>(EventEndRound.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventGetRoundTime GetRoundTime(QBoolean IsBuyPhase, QBoolean IsPVPRound, FP RemainingTime) {
        var ev = _f.Context.AcquireEvent<EventGetRoundTime>(EventGetRoundTime.ID);
        ev.IsBuyPhase = IsBuyPhase;
        ev.IsPVPRound = IsPVPRound;
        ev.RemainingTime = RemainingTime;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGetProjectiles GetProjectiles(PlayerRef Player1, PlayerRef Player2) {
        var ev = _f.Context.AcquireEvent<EventGetProjectiles>(EventGetProjectiles.ID);
        ev.Player1 = Player1;
        ev.Player2 = Player2;
        _f.AddEvent(ev);
        return ev;
      }
      public EventGetShopUpgradeInfo GetShopUpgradeInfo(PlayerRef PlayerRef, Int32 CurrentXP, Int32 MaxXPCost, Int32 CurrentLevel) {
        var ev = _f.Context.AcquireEvent<EventGetShopUpgradeInfo>(EventGetShopUpgradeInfo.ID);
        ev.PlayerRef = PlayerRef;
        ev.CurrentXP = CurrentXP;
        ev.MaxXPCost = MaxXPCost;
        ev.CurrentLevel = CurrentLevel;
        _f.AddEvent(ev);
        return ev;
      }
      public EventShowCoinsReward ShowCoinsReward(PlayerRef PlayerRef, Int32 RoundResult, Int32 BaseCoins, Int32 RoundResultCoins, Int32 StreakCoins) {
        var ev = _f.Context.AcquireEvent<EventShowCoinsReward>(EventShowCoinsReward.ID);
        ev.PlayerRef = PlayerRef;
        ev.RoundResult = RoundResult;
        ev.BaseCoins = BaseCoins;
        ev.RoundResultCoins = RoundResultCoins;
        ev.StreakCoins = StreakCoins;
        _f.AddEvent(ev);
        return ev;
      }
    }
  }
  public unsafe partial class EventGetPlayerInfo : EventBase {
    public new const Int32 ID = 1;
    public Frame Frame;
    public PlayerRef PlayerRef;
    public PlayerInfo PlayerInfo;
    protected EventGetPlayerInfo(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGetPlayerInfo() : 
        base(1, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + Frame.GetHashCode();
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + PlayerInfo.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGetCurrentPlayers : EventBase {
    public new const Int32 ID = 2;
    protected EventGetCurrentPlayers(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGetCurrentPlayers() : 
        base(2, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        return hash;
      }
    }
  }
  public unsafe partial class EventHeroHealthChanged : EventBase {
    public new const Int32 ID = 3;
    public PlayerRef PlayerRef1;
    public PlayerRef PlayerRef2;
    public EntityRef HeroEntity;
    public FP CurrentHealth;
    public FP MaxHealth;
    protected EventHeroHealthChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventHeroHealthChanged() : 
        base(3, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + PlayerRef1.GetHashCode();
        hash = hash * 31 + PlayerRef2.GetHashCode();
        hash = hash * 31 + HeroEntity.GetHashCode();
        hash = hash * 31 + CurrentHealth.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventHeroManaChanged : EventBase {
    public new const Int32 ID = 4;
    public PlayerRef PlayerRef1;
    public PlayerRef PlayerRef2;
    public EntityRef HeroEntity;
    public FP CurrentMana;
    public FP MaxMana;
    protected EventHeroManaChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventHeroManaChanged() : 
        base(4, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + PlayerRef1.GetHashCode();
        hash = hash * 31 + PlayerRef2.GetHashCode();
        hash = hash * 31 + HeroEntity.GetHashCode();
        hash = hash * 31 + CurrentMana.GetHashCode();
        hash = hash * 31 + MaxMana.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventChangeCoins : EventBase {
    public new const Int32 ID = 5;
    public PlayerRef PlayerRef;
    public Int32 Coins;
    protected EventChangeCoins(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventChangeCoins() : 
        base(5, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + Coins.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventReloadShop : EventBase {
    public new const Int32 ID = 6;
    public PlayerRef PlayerRef;
    protected EventReloadShop(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventReloadShop() : 
        base(6, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + PlayerRef.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventBuyHero : EventBase {
    public new const Int32 ID = 7;
    public PlayerRef PlayerRef;
    public Int32 ShopIndex;
    public Int32 InventoryIndex;
    public Int32 HeroID;
    protected EventBuyHero(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventBuyHero() : 
        base(7, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + ShopIndex.GetHashCode();
        hash = hash * 31 + InventoryIndex.GetHashCode();
        hash = hash * 31 + HeroID.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventMoveHero : EventBase {
    public new const Int32 ID = 8;
    public PlayerRef PlayerRef;
    public QBoolean IsMoved;
    protected EventMoveHero(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventMoveHero() : 
        base(8, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + IsMoved.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventStartRound : EventBase {
    public new const Int32 ID = 9;
    public PlayerRef Player1;
    public PlayerRef Player2;
    protected EventStartRound(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventStartRound() : 
        base(9, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        hash = hash * 31 + Player1.GetHashCode();
        hash = hash * 31 + Player2.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventEndRound : EventBase {
    public new const Int32 ID = 10;
    protected EventEndRound(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventEndRound() : 
        base(10, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 79;
        return hash;
      }
    }
  }
  public unsafe partial class EventGetRoundTime : EventBase {
    public new const Int32 ID = 11;
    public QBoolean IsBuyPhase;
    public QBoolean IsPVPRound;
    public FP RemainingTime;
    protected EventGetRoundTime(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGetRoundTime() : 
        base(11, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 83;
        hash = hash * 31 + IsBuyPhase.GetHashCode();
        hash = hash * 31 + IsPVPRound.GetHashCode();
        hash = hash * 31 + RemainingTime.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGetProjectiles : EventBase {
    public new const Int32 ID = 12;
    public PlayerRef Player1;
    public PlayerRef Player2;
    protected EventGetProjectiles(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGetProjectiles() : 
        base(12, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 89;
        hash = hash * 31 + Player1.GetHashCode();
        hash = hash * 31 + Player2.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventGetShopUpgradeInfo : EventBase {
    public new const Int32 ID = 13;
    public PlayerRef PlayerRef;
    public Int32 CurrentXP;
    public Int32 MaxXPCost;
    public Int32 CurrentLevel;
    protected EventGetShopUpgradeInfo(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventGetShopUpgradeInfo() : 
        base(13, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 97;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + CurrentXP.GetHashCode();
        hash = hash * 31 + MaxXPCost.GetHashCode();
        hash = hash * 31 + CurrentLevel.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventShowCoinsReward : EventBase {
    public new const Int32 ID = 14;
    public PlayerRef PlayerRef;
    public Int32 RoundResult;
    public Int32 BaseCoins;
    public Int32 RoundResultCoins;
    public Int32 StreakCoins;
    protected EventShowCoinsReward(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventShowCoinsReward() : 
        base(14, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 101;
        hash = hash * 31 + PlayerRef.GetHashCode();
        hash = hash * 31 + RoundResult.GetHashCode();
        hash = hash * 31 + BaseCoins.GetHashCode();
        hash = hash * 31 + RoundResultCoins.GetHashCode();
        hash = hash * 31 + StreakCoins.GetHashCode();
        return hash;
      }
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
