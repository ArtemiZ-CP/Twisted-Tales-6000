// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes.Unity {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  public unsafe partial class BoardPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.BoardPrototype> {
    public Quantum.QuantumEntityPrototype Ref;
    public Quantum.Prototypes.PlayerLinkPrototype Player1;
    public Quantum.Prototypes.PlayerLinkPrototype Player2;
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.Unity.HeroEntityPrototype[] HeroesID1 = {};
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.Unity.HeroEntityPrototype[] HeroesID2 = {};
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.Unity.FightingHeroPrototype[] FightingHeroesMap = {};
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.Unity.HeroProjectilePrototype[] HeroProjectiles = {};
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.BoardPrototype prototype);
    public override Quantum.Prototypes.BoardPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.BoardPrototype();
      converter.Convert(this.Ref, out result.Ref);
      converter.Convert(this.Player1, out result.Player1);
      converter.Convert(this.Player2, out result.Player2);
      converter.Convert(this.HeroesID1, out result.HeroesID1);
      converter.Convert(this.HeroesID2, out result.HeroesID2);
      converter.Convert(this.FightingHeroesMap, out result.FightingHeroesMap);
      converter.Convert(this.HeroProjectiles, out result.HeroProjectiles);
      ConvertUser(converter, ref result);
      return result;
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class FightingHeroPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.FightingHeroPrototype> {
    public Quantum.Prototypes.Unity.HeroEntityPrototype Hero;
    public Int32 Index;
    public Int32 BoardIndex;
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.FightingHeroPrototype prototype);
    public override Quantum.Prototypes.FightingHeroPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.FightingHeroPrototype();
      converter.Convert(this.Hero, out result.Hero);
      converter.Convert(this.Index, out result.Index);
      converter.Convert(this.BoardIndex, out result.BoardIndex);
      ConvertUser(converter, ref result);
      return result;
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class HeroEntityPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.HeroEntityPrototype> {
    public Quantum.QuantumEntityPrototype Ref;
    public Int32 ID;
    public Int32 Level;
    public FPVector3 DefaultPosition;
    public FP Health;
    public FP MaxMana;
    public FP ManaRegen;
    public FP ManaDamageRegenPersent;
    public FP Defense;
    public FP MagicDefense;
    public FP AttackDamage;
    public FP AbilityDamage;
    public FP AttackSpeed;
    public FP ProjectileSpeed;
    public Int32 Range;
    public FP RangePercentage;
    public Int32 AttackDamageType;
    public Int32 AbilityDamageType;
    public FP CurrentHealth;
    public FP CurrentMana;
    public Quantum.QuantumEntityPrototype AttackTarget;
    public Int32 TargetPositionX;
    public Int32 TargetPositionY;
    public Int32 TeamNumber;
    public QBoolean IsAlive;
    public FP AttackTimer;
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.HeroEntityPrototype prototype);
    public override Quantum.Prototypes.HeroEntityPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.HeroEntityPrototype();
      converter.Convert(this.Ref, out result.Ref);
      converter.Convert(this.ID, out result.ID);
      converter.Convert(this.Level, out result.Level);
      converter.Convert(this.DefaultPosition, out result.DefaultPosition);
      converter.Convert(this.Health, out result.Health);
      converter.Convert(this.MaxMana, out result.MaxMana);
      converter.Convert(this.ManaRegen, out result.ManaRegen);
      converter.Convert(this.ManaDamageRegenPersent, out result.ManaDamageRegenPersent);
      converter.Convert(this.Defense, out result.Defense);
      converter.Convert(this.MagicDefense, out result.MagicDefense);
      converter.Convert(this.AttackDamage, out result.AttackDamage);
      converter.Convert(this.AbilityDamage, out result.AbilityDamage);
      converter.Convert(this.AttackSpeed, out result.AttackSpeed);
      converter.Convert(this.ProjectileSpeed, out result.ProjectileSpeed);
      converter.Convert(this.Range, out result.Range);
      converter.Convert(this.RangePercentage, out result.RangePercentage);
      converter.Convert(this.AttackDamageType, out result.AttackDamageType);
      converter.Convert(this.AbilityDamageType, out result.AbilityDamageType);
      converter.Convert(this.CurrentHealth, out result.CurrentHealth);
      converter.Convert(this.CurrentMana, out result.CurrentMana);
      converter.Convert(this.AttackTarget, out result.AttackTarget);
      converter.Convert(this.TargetPositionX, out result.TargetPositionX);
      converter.Convert(this.TargetPositionY, out result.TargetPositionY);
      converter.Convert(this.TeamNumber, out result.TeamNumber);
      converter.Convert(this.IsAlive, out result.IsAlive);
      converter.Convert(this.AttackTimer, out result.AttackTimer);
      ConvertUser(converter, ref result);
      return result;
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class HeroProjectilePrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.HeroProjectilePrototype> {
    public Quantum.QuantumEntityPrototype Ref;
    public Quantum.Prototypes.Unity.HeroEntityPrototype Target;
    public FP Speed;
    public FP Damage;
    public Int32 DamageType;
    public Int32 Level;
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.HeroProjectilePrototype prototype);
    public override Quantum.Prototypes.HeroProjectilePrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.HeroProjectilePrototype();
      converter.Convert(this.Ref, out result.Ref);
      converter.Convert(this.Target, out result.Target);
      converter.Convert(this.Speed, out result.Speed);
      converter.Convert(this.Damage, out result.Damage);
      converter.Convert(this.DamageType, out result.DamageType);
      converter.Convert(this.Level, out result.Level);
      ConvertUser(converter, ref result);
      return result;
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
